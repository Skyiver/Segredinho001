name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  # 1) etapa de teste
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: usuario
          POSTGRES_PASSWORD: senha
          POSTGRES_DB: escola
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        env:
          DATABASE_URL: postgresql://usuario:senha@localhost:5432/escola
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Flask API in background
        env:
          FLASK_APP: app.py
          FLASK_ENV: development
          DATABASE_URL: postgresql://usuario:senha@localhost:5432/escola
        run: |
          flask run --host=0.0.0.0 --port=5002 &
          for i in {1..15}; do
            curl --fail http://localhost:5002/api/alunos && break
            sleep 1
          done

      - name: Run tests
        env:
          BASE_URL: http://localhost:5002/api
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          pytest tests/ -v

  # 2) etapa de deploy (s√≥ roda se 'test' passar)
  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install AWS EB CLI
        run: |
          pip install --upgrade pip
          pip install awsebcli

      - name: Package application
        run: |
          zip -r deploy.zip . -x '*.git*' '*.env*' 'tests/*' 'venv/*' '__pycache__/*'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Elastic Beanstalk
        run: |
          eb init school-api --platform docker --region us-east-1
          eb deploy --staged --verbose